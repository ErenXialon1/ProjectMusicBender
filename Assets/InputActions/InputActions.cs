//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/InputActions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Overworld"",
            ""id"": ""aa63ed85-c902-4ab5-a7fc-7b6f37d6b203"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Battle"",
            ""id"": ""ccd568b7-1762-4b86-acf0-af076c8833be"",
            ""actions"": [
                {
                    ""name"": ""UpAttackInFight"",
                    ""type"": ""Button"",
                    ""id"": ""6ea56b51-bce5-48b4-8509-3f91cb27b11f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownAttackInFight"",
                    ""type"": ""Button"",
                    ""id"": ""dc41742a-56cc-4b64-be8a-5cd71a76acf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightAttackInFight"",
                    ""type"": ""Button"",
                    ""id"": ""7de770e0-a893-4456-919d-98ceb1eb2f8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftAttackInFight"",
                    ""type"": ""Button"",
                    ""id"": ""007d995b-8100-4b5f-b608-1dcc07e73737"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmAttack"",
                    ""type"": ""Button"",
                    ""id"": ""a3e8c246-43f6-48a1-aac9-cf73f7b04372"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackInputClear"",
                    ""type"": ""Button"",
                    ""id"": ""2e0678b4-9e02-44fc-b677-7da3e614716b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChainAttack"",
                    ""type"": ""Button"",
                    ""id"": ""d0e7da83-d2aa-47c1-80ca-0007b442ac9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7160e6f0-84fe-4dfd-9233-33c921111d56"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f64d3cb-6319-4314-8eba-f4073225aa3c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97c16621-18ca-45f3-92b2-ba989894046b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27381ba6-a71f-40a8-bab6-e60f3dce54d8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87081479-eda2-4645-8549-c570db8e629e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""785cb07b-21cb-40e5-be4b-4a1b960119b1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90176664-a4ac-4f57-9767-ffb0aa56ee01"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d36623de-55a2-4fc7-9f43-2090747afe32"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6189ccb8-5025-4d9b-84ee-a5bcde00266a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e827931-ed02-4671-937b-e3176844c429"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackInputClear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e9f8277-c59c-4db0-8cad-4b641cce0c0a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChainAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""QTE"",
            ""id"": ""f863ca7d-1f4c-4ade-98a2-a66c52776267"",
            ""actions"": [
                {
                    ""name"": ""QTE_Up"",
                    ""type"": ""Button"",
                    ""id"": ""aa7aa1f6-38f2-44ca-a82d-44f90625ac88"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QTE_Down"",
                    ""type"": ""Button"",
                    ""id"": ""3fefb3cf-a716-4b77-b4f3-d0c60e8bb679"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QTE_Right"",
                    ""type"": ""Button"",
                    ""id"": ""60ff812a-4e0e-4e78-b026-aee269e6c732"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QTE_Left"",
                    ""type"": ""Button"",
                    ""id"": ""dc6d09cd-b7e6-433f-babd-40106549654b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateBattleMap"",
                    ""type"": ""Button"",
                    ""id"": ""6f107936-bf9a-410c-8b61-b73b3022669b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""098eb13c-c9f0-4c08-9681-4409f5a5c1a1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0540f06d-58ef-46ae-9844-a3f65ff11403"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c46234c0-5f63-409d-942a-0fcfb365ea9b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ce4e5e8-be95-4945-9073-9bc23c7bdf7b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8403ddd-5088-4131-8bbb-785f06715c4a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""968488dc-1f24-49d1-b3a1-bda72c89474d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e8211e7-9862-4a0b-a350-e8c5cddaa42c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b3c997d-8723-483e-a293-ce46d0009d70"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80a27db4-da0b-435a-9699-2242faabcabe"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateBattleMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Overworld
        m_Overworld = asset.FindActionMap("Overworld", throwIfNotFound: true);
        // Battle
        m_Battle = asset.FindActionMap("Battle", throwIfNotFound: true);
        m_Battle_UpAttackInFight = m_Battle.FindAction("UpAttackInFight", throwIfNotFound: true);
        m_Battle_DownAttackInFight = m_Battle.FindAction("DownAttackInFight", throwIfNotFound: true);
        m_Battle_RightAttackInFight = m_Battle.FindAction("RightAttackInFight", throwIfNotFound: true);
        m_Battle_LeftAttackInFight = m_Battle.FindAction("LeftAttackInFight", throwIfNotFound: true);
        m_Battle_ConfirmAttack = m_Battle.FindAction("ConfirmAttack", throwIfNotFound: true);
        m_Battle_AttackInputClear = m_Battle.FindAction("AttackInputClear", throwIfNotFound: true);
        m_Battle_ChainAttack = m_Battle.FindAction("ChainAttack", throwIfNotFound: true);
        // QTE
        m_QTE = asset.FindActionMap("QTE", throwIfNotFound: true);
        m_QTE_QTE_Up = m_QTE.FindAction("QTE_Up", throwIfNotFound: true);
        m_QTE_QTE_Down = m_QTE.FindAction("QTE_Down", throwIfNotFound: true);
        m_QTE_QTE_Right = m_QTE.FindAction("QTE_Right", throwIfNotFound: true);
        m_QTE_QTE_Left = m_QTE.FindAction("QTE_Left", throwIfNotFound: true);
        m_QTE_ActivateBattleMap = m_QTE.FindAction("ActivateBattleMap", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Overworld.enabled, "This will cause a leak and performance issues, InputActions.Overworld.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Battle.enabled, "This will cause a leak and performance issues, InputActions.Battle.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_QTE.enabled, "This will cause a leak and performance issues, InputActions.QTE.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Overworld
    private readonly InputActionMap m_Overworld;
    private List<IOverworldActions> m_OverworldActionsCallbackInterfaces = new List<IOverworldActions>();
    public struct OverworldActions
    {
        private @InputActions m_Wrapper;
        public OverworldActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Overworld; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OverworldActions set) { return set.Get(); }
        public void AddCallbacks(IOverworldActions instance)
        {
            if (instance == null || m_Wrapper.m_OverworldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OverworldActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IOverworldActions instance)
        {
        }

        public void RemoveCallbacks(IOverworldActions instance)
        {
            if (m_Wrapper.m_OverworldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOverworldActions instance)
        {
            foreach (var item in m_Wrapper.m_OverworldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OverworldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OverworldActions @Overworld => new OverworldActions(this);

    // Battle
    private readonly InputActionMap m_Battle;
    private List<IBattleActions> m_BattleActionsCallbackInterfaces = new List<IBattleActions>();
    private readonly InputAction m_Battle_UpAttackInFight;
    private readonly InputAction m_Battle_DownAttackInFight;
    private readonly InputAction m_Battle_RightAttackInFight;
    private readonly InputAction m_Battle_LeftAttackInFight;
    private readonly InputAction m_Battle_ConfirmAttack;
    private readonly InputAction m_Battle_AttackInputClear;
    private readonly InputAction m_Battle_ChainAttack;
    public struct BattleActions
    {
        private @InputActions m_Wrapper;
        public BattleActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpAttackInFight => m_Wrapper.m_Battle_UpAttackInFight;
        public InputAction @DownAttackInFight => m_Wrapper.m_Battle_DownAttackInFight;
        public InputAction @RightAttackInFight => m_Wrapper.m_Battle_RightAttackInFight;
        public InputAction @LeftAttackInFight => m_Wrapper.m_Battle_LeftAttackInFight;
        public InputAction @ConfirmAttack => m_Wrapper.m_Battle_ConfirmAttack;
        public InputAction @AttackInputClear => m_Wrapper.m_Battle_AttackInputClear;
        public InputAction @ChainAttack => m_Wrapper.m_Battle_ChainAttack;
        public InputActionMap Get() { return m_Wrapper.m_Battle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleActions set) { return set.Get(); }
        public void AddCallbacks(IBattleActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleActionsCallbackInterfaces.Add(instance);
            @UpAttackInFight.started += instance.OnUpAttackInFight;
            @UpAttackInFight.performed += instance.OnUpAttackInFight;
            @UpAttackInFight.canceled += instance.OnUpAttackInFight;
            @DownAttackInFight.started += instance.OnDownAttackInFight;
            @DownAttackInFight.performed += instance.OnDownAttackInFight;
            @DownAttackInFight.canceled += instance.OnDownAttackInFight;
            @RightAttackInFight.started += instance.OnRightAttackInFight;
            @RightAttackInFight.performed += instance.OnRightAttackInFight;
            @RightAttackInFight.canceled += instance.OnRightAttackInFight;
            @LeftAttackInFight.started += instance.OnLeftAttackInFight;
            @LeftAttackInFight.performed += instance.OnLeftAttackInFight;
            @LeftAttackInFight.canceled += instance.OnLeftAttackInFight;
            @ConfirmAttack.started += instance.OnConfirmAttack;
            @ConfirmAttack.performed += instance.OnConfirmAttack;
            @ConfirmAttack.canceled += instance.OnConfirmAttack;
            @AttackInputClear.started += instance.OnAttackInputClear;
            @AttackInputClear.performed += instance.OnAttackInputClear;
            @AttackInputClear.canceled += instance.OnAttackInputClear;
            @ChainAttack.started += instance.OnChainAttack;
            @ChainAttack.performed += instance.OnChainAttack;
            @ChainAttack.canceled += instance.OnChainAttack;
        }

        private void UnregisterCallbacks(IBattleActions instance)
        {
            @UpAttackInFight.started -= instance.OnUpAttackInFight;
            @UpAttackInFight.performed -= instance.OnUpAttackInFight;
            @UpAttackInFight.canceled -= instance.OnUpAttackInFight;
            @DownAttackInFight.started -= instance.OnDownAttackInFight;
            @DownAttackInFight.performed -= instance.OnDownAttackInFight;
            @DownAttackInFight.canceled -= instance.OnDownAttackInFight;
            @RightAttackInFight.started -= instance.OnRightAttackInFight;
            @RightAttackInFight.performed -= instance.OnRightAttackInFight;
            @RightAttackInFight.canceled -= instance.OnRightAttackInFight;
            @LeftAttackInFight.started -= instance.OnLeftAttackInFight;
            @LeftAttackInFight.performed -= instance.OnLeftAttackInFight;
            @LeftAttackInFight.canceled -= instance.OnLeftAttackInFight;
            @ConfirmAttack.started -= instance.OnConfirmAttack;
            @ConfirmAttack.performed -= instance.OnConfirmAttack;
            @ConfirmAttack.canceled -= instance.OnConfirmAttack;
            @AttackInputClear.started -= instance.OnAttackInputClear;
            @AttackInputClear.performed -= instance.OnAttackInputClear;
            @AttackInputClear.canceled -= instance.OnAttackInputClear;
            @ChainAttack.started -= instance.OnChainAttack;
            @ChainAttack.performed -= instance.OnChainAttack;
            @ChainAttack.canceled -= instance.OnChainAttack;
        }

        public void RemoveCallbacks(IBattleActions instance)
        {
            if (m_Wrapper.m_BattleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleActions @Battle => new BattleActions(this);

    // QTE
    private readonly InputActionMap m_QTE;
    private List<IQTEActions> m_QTEActionsCallbackInterfaces = new List<IQTEActions>();
    private readonly InputAction m_QTE_QTE_Up;
    private readonly InputAction m_QTE_QTE_Down;
    private readonly InputAction m_QTE_QTE_Right;
    private readonly InputAction m_QTE_QTE_Left;
    private readonly InputAction m_QTE_ActivateBattleMap;
    public struct QTEActions
    {
        private @InputActions m_Wrapper;
        public QTEActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @QTE_Up => m_Wrapper.m_QTE_QTE_Up;
        public InputAction @QTE_Down => m_Wrapper.m_QTE_QTE_Down;
        public InputAction @QTE_Right => m_Wrapper.m_QTE_QTE_Right;
        public InputAction @QTE_Left => m_Wrapper.m_QTE_QTE_Left;
        public InputAction @ActivateBattleMap => m_Wrapper.m_QTE_ActivateBattleMap;
        public InputActionMap Get() { return m_Wrapper.m_QTE; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QTEActions set) { return set.Get(); }
        public void AddCallbacks(IQTEActions instance)
        {
            if (instance == null || m_Wrapper.m_QTEActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QTEActionsCallbackInterfaces.Add(instance);
            @QTE_Up.started += instance.OnQTE_Up;
            @QTE_Up.performed += instance.OnQTE_Up;
            @QTE_Up.canceled += instance.OnQTE_Up;
            @QTE_Down.started += instance.OnQTE_Down;
            @QTE_Down.performed += instance.OnQTE_Down;
            @QTE_Down.canceled += instance.OnQTE_Down;
            @QTE_Right.started += instance.OnQTE_Right;
            @QTE_Right.performed += instance.OnQTE_Right;
            @QTE_Right.canceled += instance.OnQTE_Right;
            @QTE_Left.started += instance.OnQTE_Left;
            @QTE_Left.performed += instance.OnQTE_Left;
            @QTE_Left.canceled += instance.OnQTE_Left;
            @ActivateBattleMap.started += instance.OnActivateBattleMap;
            @ActivateBattleMap.performed += instance.OnActivateBattleMap;
            @ActivateBattleMap.canceled += instance.OnActivateBattleMap;
        }

        private void UnregisterCallbacks(IQTEActions instance)
        {
            @QTE_Up.started -= instance.OnQTE_Up;
            @QTE_Up.performed -= instance.OnQTE_Up;
            @QTE_Up.canceled -= instance.OnQTE_Up;
            @QTE_Down.started -= instance.OnQTE_Down;
            @QTE_Down.performed -= instance.OnQTE_Down;
            @QTE_Down.canceled -= instance.OnQTE_Down;
            @QTE_Right.started -= instance.OnQTE_Right;
            @QTE_Right.performed -= instance.OnQTE_Right;
            @QTE_Right.canceled -= instance.OnQTE_Right;
            @QTE_Left.started -= instance.OnQTE_Left;
            @QTE_Left.performed -= instance.OnQTE_Left;
            @QTE_Left.canceled -= instance.OnQTE_Left;
            @ActivateBattleMap.started -= instance.OnActivateBattleMap;
            @ActivateBattleMap.performed -= instance.OnActivateBattleMap;
            @ActivateBattleMap.canceled -= instance.OnActivateBattleMap;
        }

        public void RemoveCallbacks(IQTEActions instance)
        {
            if (m_Wrapper.m_QTEActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQTEActions instance)
        {
            foreach (var item in m_Wrapper.m_QTEActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QTEActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QTEActions @QTE => new QTEActions(this);
    public interface IOverworldActions
    {
    }
    public interface IBattleActions
    {
        void OnUpAttackInFight(InputAction.CallbackContext context);
        void OnDownAttackInFight(InputAction.CallbackContext context);
        void OnRightAttackInFight(InputAction.CallbackContext context);
        void OnLeftAttackInFight(InputAction.CallbackContext context);
        void OnConfirmAttack(InputAction.CallbackContext context);
        void OnAttackInputClear(InputAction.CallbackContext context);
        void OnChainAttack(InputAction.CallbackContext context);
    }
    public interface IQTEActions
    {
        void OnQTE_Up(InputAction.CallbackContext context);
        void OnQTE_Down(InputAction.CallbackContext context);
        void OnQTE_Right(InputAction.CallbackContext context);
        void OnQTE_Left(InputAction.CallbackContext context);
        void OnActivateBattleMap(InputAction.CallbackContext context);
    }
}
