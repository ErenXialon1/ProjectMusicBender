//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/InputActions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ccd568b7-1762-4b86-acf0-af076c8833be"",
            ""actions"": [
                {
                    ""name"": ""UpAttackInFight"",
                    ""type"": ""Button"",
                    ""id"": ""6ea56b51-bce5-48b4-8509-3f91cb27b11f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownAttackInFight"",
                    ""type"": ""Button"",
                    ""id"": ""dc41742a-56cc-4b64-be8a-5cd71a76acf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightAttackInFight"",
                    ""type"": ""Button"",
                    ""id"": ""7de770e0-a893-4456-919d-98ceb1eb2f8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftAttackInFight"",
                    ""type"": ""Button"",
                    ""id"": ""007d995b-8100-4b5f-b608-1dcc07e73737"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmAttack"",
                    ""type"": ""Button"",
                    ""id"": ""a3e8c246-43f6-48a1-aac9-cf73f7b04372"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackInputClear"",
                    ""type"": ""Button"",
                    ""id"": ""2e0678b4-9e02-44fc-b677-7da3e614716b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExecuteSkillQuete"",
                    ""type"": ""Button"",
                    ""id"": ""7dbecadf-2f69-47f3-a94d-eb63ef4426f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputOnOff"",
                    ""type"": ""Button"",
                    ""id"": ""e2cd775a-d536-4388-bd7e-e9f3e4176739"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7160e6f0-84fe-4dfd-9233-33c921111d56"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f64d3cb-6319-4314-8eba-f4073225aa3c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97c16621-18ca-45f3-92b2-ba989894046b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27381ba6-a71f-40a8-bab6-e60f3dce54d8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87081479-eda2-4645-8549-c570db8e629e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""785cb07b-21cb-40e5-be4b-4a1b960119b1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90176664-a4ac-4f57-9767-ffb0aa56ee01"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d36623de-55a2-4fc7-9f43-2090747afe32"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAttackInFight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6189ccb8-5025-4d9b-84ee-a5bcde00266a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e827931-ed02-4671-937b-e3176844c429"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackInputClear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d99b455e-6107-4a4b-8e73-981598de60ac"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExecuteSkillQuete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99196ab0-e66a-462a-aa14-4664d8b30e17"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputOnOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_UpAttackInFight = m_Player.FindAction("UpAttackInFight", throwIfNotFound: true);
        m_Player_DownAttackInFight = m_Player.FindAction("DownAttackInFight", throwIfNotFound: true);
        m_Player_RightAttackInFight = m_Player.FindAction("RightAttackInFight", throwIfNotFound: true);
        m_Player_LeftAttackInFight = m_Player.FindAction("LeftAttackInFight", throwIfNotFound: true);
        m_Player_ConfirmAttack = m_Player.FindAction("ConfirmAttack", throwIfNotFound: true);
        m_Player_AttackInputClear = m_Player.FindAction("AttackInputClear", throwIfNotFound: true);
        m_Player_ExecuteSkillQuete = m_Player.FindAction("ExecuteSkillQuete", throwIfNotFound: true);
        m_Player_InputOnOff = m_Player.FindAction("InputOnOff", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputActions.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_UpAttackInFight;
    private readonly InputAction m_Player_DownAttackInFight;
    private readonly InputAction m_Player_RightAttackInFight;
    private readonly InputAction m_Player_LeftAttackInFight;
    private readonly InputAction m_Player_ConfirmAttack;
    private readonly InputAction m_Player_AttackInputClear;
    private readonly InputAction m_Player_ExecuteSkillQuete;
    private readonly InputAction m_Player_InputOnOff;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpAttackInFight => m_Wrapper.m_Player_UpAttackInFight;
        public InputAction @DownAttackInFight => m_Wrapper.m_Player_DownAttackInFight;
        public InputAction @RightAttackInFight => m_Wrapper.m_Player_RightAttackInFight;
        public InputAction @LeftAttackInFight => m_Wrapper.m_Player_LeftAttackInFight;
        public InputAction @ConfirmAttack => m_Wrapper.m_Player_ConfirmAttack;
        public InputAction @AttackInputClear => m_Wrapper.m_Player_AttackInputClear;
        public InputAction @ExecuteSkillQuete => m_Wrapper.m_Player_ExecuteSkillQuete;
        public InputAction @InputOnOff => m_Wrapper.m_Player_InputOnOff;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @UpAttackInFight.started += instance.OnUpAttackInFight;
            @UpAttackInFight.performed += instance.OnUpAttackInFight;
            @UpAttackInFight.canceled += instance.OnUpAttackInFight;
            @DownAttackInFight.started += instance.OnDownAttackInFight;
            @DownAttackInFight.performed += instance.OnDownAttackInFight;
            @DownAttackInFight.canceled += instance.OnDownAttackInFight;
            @RightAttackInFight.started += instance.OnRightAttackInFight;
            @RightAttackInFight.performed += instance.OnRightAttackInFight;
            @RightAttackInFight.canceled += instance.OnRightAttackInFight;
            @LeftAttackInFight.started += instance.OnLeftAttackInFight;
            @LeftAttackInFight.performed += instance.OnLeftAttackInFight;
            @LeftAttackInFight.canceled += instance.OnLeftAttackInFight;
            @ConfirmAttack.started += instance.OnConfirmAttack;
            @ConfirmAttack.performed += instance.OnConfirmAttack;
            @ConfirmAttack.canceled += instance.OnConfirmAttack;
            @AttackInputClear.started += instance.OnAttackInputClear;
            @AttackInputClear.performed += instance.OnAttackInputClear;
            @AttackInputClear.canceled += instance.OnAttackInputClear;
            @ExecuteSkillQuete.started += instance.OnExecuteSkillQuete;
            @ExecuteSkillQuete.performed += instance.OnExecuteSkillQuete;
            @ExecuteSkillQuete.canceled += instance.OnExecuteSkillQuete;
            @InputOnOff.started += instance.OnInputOnOff;
            @InputOnOff.performed += instance.OnInputOnOff;
            @InputOnOff.canceled += instance.OnInputOnOff;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @UpAttackInFight.started -= instance.OnUpAttackInFight;
            @UpAttackInFight.performed -= instance.OnUpAttackInFight;
            @UpAttackInFight.canceled -= instance.OnUpAttackInFight;
            @DownAttackInFight.started -= instance.OnDownAttackInFight;
            @DownAttackInFight.performed -= instance.OnDownAttackInFight;
            @DownAttackInFight.canceled -= instance.OnDownAttackInFight;
            @RightAttackInFight.started -= instance.OnRightAttackInFight;
            @RightAttackInFight.performed -= instance.OnRightAttackInFight;
            @RightAttackInFight.canceled -= instance.OnRightAttackInFight;
            @LeftAttackInFight.started -= instance.OnLeftAttackInFight;
            @LeftAttackInFight.performed -= instance.OnLeftAttackInFight;
            @LeftAttackInFight.canceled -= instance.OnLeftAttackInFight;
            @ConfirmAttack.started -= instance.OnConfirmAttack;
            @ConfirmAttack.performed -= instance.OnConfirmAttack;
            @ConfirmAttack.canceled -= instance.OnConfirmAttack;
            @AttackInputClear.started -= instance.OnAttackInputClear;
            @AttackInputClear.performed -= instance.OnAttackInputClear;
            @AttackInputClear.canceled -= instance.OnAttackInputClear;
            @ExecuteSkillQuete.started -= instance.OnExecuteSkillQuete;
            @ExecuteSkillQuete.performed -= instance.OnExecuteSkillQuete;
            @ExecuteSkillQuete.canceled -= instance.OnExecuteSkillQuete;
            @InputOnOff.started -= instance.OnInputOnOff;
            @InputOnOff.performed -= instance.OnInputOnOff;
            @InputOnOff.canceled -= instance.OnInputOnOff;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnUpAttackInFight(InputAction.CallbackContext context);
        void OnDownAttackInFight(InputAction.CallbackContext context);
        void OnRightAttackInFight(InputAction.CallbackContext context);
        void OnLeftAttackInFight(InputAction.CallbackContext context);
        void OnConfirmAttack(InputAction.CallbackContext context);
        void OnAttackInputClear(InputAction.CallbackContext context);
        void OnExecuteSkillQuete(InputAction.CallbackContext context);
        void OnInputOnOff(InputAction.CallbackContext context);
    }
}
